import React, { Component } from 'react';
import * as firebase from 'firebase';

class LoginForm extends Component {
    constructor() {
        super();
        this.state = {
            method: 'login',
            header: 'Login',
            email: '',
            password: '',
            user: ''
        }
    }

    handleLogin = () => {
        if (this.state.method !== 'login') {
            this.setState({ method: 'login', header: 'Login' });
            return;
        }

        firebase.auth().signInWithEmailAndPassword(this.state.email, this.state.password).catch(function (error) {
            alert(error.code + ' - ' + error.message);
        })
    }

    handleLogout = () => {
        firebase.auth().signOut().then(() => {
            this.setState({ method: 'login', header: 'Login', email: '', password: ''});
        }).catch(function (error) {
            alert(error.code + ' - ' + error.message);
        })
    }

    handleRegister = () => {
        if (this.state.method !== 'register') {
            this.setState({ method: 'register', header: 'Register' });
            return;
        }

        firebase.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).catch(function (error) {
            alert(error.code + ' - ' + error.message);
        })
    }

    handleInputChange = (e) => {
        const target = e.target;
        const id = target.id;
        const value = target.value;
        this.setState({
            [id]: value
        })
    }

    componentDidMount = () => {
        firebase.auth().onAuthStateChanged(user => {
            console.log(this.state)
            if (user) {
                this.setState({ user: user.email, header: 'Welcome ' + user.email });
            } else {
                this.setState({ user: '' });
            }
            console.log(this.state)
        });
    }

    render() {
        let form = null;
        if (!this.state.user) {
            form = <form className="pure-form pure-form-stacked">
                <label htmlFor="email">Email</label>
                <input type="email" id="email" value={this.state.email} onChange={this.handleInputChange} />
                <label htmlFor="password">Password</label>
                <input type="password" id="password" value={this.state.password} onChange={this.handleInputChange} />
                <button type="button" className="pure-button pure-button-primary" onClick={this.handleLogin}>Login</button>
                <button type="button" className="pure-button pure-button-primary" onClick={this.handleRegister}>Register</button>
            </form>
        } else {
            form = <div>
                <button type="button" className="pure-button" onClick={this.handleLogout}>Logout</button>
            </div>
        }

        return (
            <div className="container">
                <h1>{this.state.header}</h1>
                {form}
            </div>
        )
    }
}

export default LoginForm;